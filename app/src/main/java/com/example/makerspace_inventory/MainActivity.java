package com.example.makerspace_inventory;

import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

import androidx.activity.result.ActivityResultLauncher;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

// Base Realm Packages

import io.realm.Realm;
import io.realm.mongodb.App;
import io.realm.mongodb.AppConfiguration;

// Realm Authentication Packages

import io.realm.mongodb.RealmResultTask;
import io.realm.mongodb.User;
import io.realm.mongodb.Credentials;

// MongoDB Service Packages
import io.realm.mongodb.mongo.MongoClient;
import io.realm.mongodb.mongo.MongoDatabase;
import io.realm.mongodb.mongo.MongoCollection;
import io.realm.mongodb.mongo.iterable.MongoCursor;

//Barcode & QR Code Scan Package
import com.google.android.material.appbar.MaterialToolbar;
import com.journeyapps.barcodescanner.ScanContract;
import com.journeyapps.barcodescanner.ScanOptions;

// Utility Packages
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class MainActivity extends AppCompatActivity {

    Realm uiThreadRealm;
    MongoClient mongoClient;
    MongoDatabase mongoDatabase;
    public static MongoCollection<Item> mongoCollection;
    User user;
    App app;
    String serviceName = "mongodb-atlas";
    String appID;
    String databaseName;
    String collectionName;
    int listIdCounter = 0;
    Integer serialNr;
    private MaterialToolbar mToolbar;

    public static ArrayList<Item> itemList = new ArrayList<Item>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SharedPreferences sharedPreferences = getSharedPreferences(LoginActivity.PREFS_NAME,0);
        appID = sharedPreferences.getString("appID","");
        databaseName = sharedPreferences.getString("database","");
        collectionName = sharedPreferences.getString("collection","");

        Realm.init(this);                                       /* Initialize Realm */

        app = new App(new AppConfiguration.Builder(appID)              /* Create realm app from AppID generated by the MongoDB cluster */
                .build());

        setUpToolbar();
        searchScreenScanHandler();


        if (app.currentUser() == null) {                                /* Authenticate user with loginAsync() iff no login credentials are saved for the current user */
            app.loginAsync(Credentials.anonymous(), new App.Callback<User>() {
                @Override
                public void onResult(App.Result<User> result) {
                    if (result.isSuccess()) {
                        Log.v("User", "Logged In Successfully");
                        initializeMongoDB();
                    } else {
                        Log.v("User", "Failed to Login");
                        /* Show error message if authentication failed. */

                        SharedPreferences sharedPreferences = getSharedPreferences(LoginActivity.PREFS_NAME,0);
                        SharedPreferences.Editor editor= sharedPreferences.edit();

                        editor.putBoolean("hasLoggedIn",false);
                        editor.commit();

                        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                        builder.setTitle("Invalid AppID");
                        builder.setMessage("Please check given AppID and try again.");
                        builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
                        {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i)
                            {
                                dialogInterface.dismiss();
                            }
                        }).show();
                    }
                }
            });

        } else {
            initializeMongoDB();
        }
    }

    /** Set up top ActionBar */
    private void setUpToolbar() {
        mToolbar = findViewById(R.id.mainToolbar);
        setSupportActionBar(mToolbar);
        ActionBar ab = getSupportActionBar();
        ab.setDisplayShowTitleEnabled(false);
        ab.setDisplayShowHomeEnabled(false);
    }

    /** Handle the Scan button on the SearchScreenActivity */
    private void searchScreenScanHandler() {
        Intent previousIntent = getIntent();
        boolean startScan = previousIntent.getBooleanExtra("startScan",false);
        if(startScan){
            scanCode(findViewById(R.id.scanButton));
        }
        boolean failedScan = previousIntent.getBooleanExtra("failedScan",false);
        if(failedScan){
            String invalidString = previousIntent.getStringExtra("invalidSerialNr");
            showFailedScanDialogue(invalidString);
        }
    }

    /** Creates menu at the top of the screen. */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }

    /** Handles the selection of menu items.*/
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection
        switch (item.getItemId()) {
            case R.id.helpMenu:
                return true;
            case R.id.logoutMenu:
                logoutOnClick();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Called when the user taps the Search button.
     * The SearchScreenActivity is started.
     * */
    public void openSearchScreen(View view){
        Intent intent = new Intent(this, SearchScreenActivity.class);
        intent.putExtra("collection", collectionName);
        intent.putExtra("isScannedSearch",false);
        startActivity(intent);
    }

    /**
     * Called when the user taps the Scan button.
     * The CaptureActivity is started.
     * */
    public void scanCode(View view)
    {
        ScanOptions options = new ScanOptions();
        options.setPrompt("Press volume up to turn flash on");
        options.setBeepEnabled(true);
        options.setOrientationLocked(true);
        options.setCaptureActivity(CaptureAct.class);
        barLauncher.launch(options);
    }

    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch(NumberFormatException e){
            return false;
        }
    }

    /** Manage results from the Barcode & QR Code scanner */
    ActivityResultLauncher<ScanOptions> barLauncher = registerForActivityResult(new ScanContract(), result->
    {
        if(result.getContents() !=null)
        {
            try{    /*
                     * If the scanned code is a number, then search item by serial number.
                     * If the scanned code is a String, then search item by location.
                     */

                boolean isScannedItem = true;

                if(isNumeric(result.getContents().toString())){
                    Integer resultInt = Integer.valueOf(result.getContents());
                    Intent intent = new Intent(this, DetailedItemActivity.class);
                    intent.putExtra("resultSerialNr", resultInt);
                    intent.putExtra("isScannedItem", isScannedItem);
                    startActivity(intent);
                }else{
                    String resultCode = result.getContents().toString();
                    Intent searchIntent = new Intent(this, SearchScreenActivity.class);
                    searchIntent.putExtra("resultCode",resultCode);
                    searchIntent.putExtra("isScannedItem", isScannedItem);
                    startActivity(searchIntent);
                }

            }catch(NumberFormatException nfe){
                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                builder.setTitle("Invalid Code");
                builder.setMessage("Scanned barcode or QR Code not allowed.");
                builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
                {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i)
                    {
                        dialogInterface.dismiss();
                    }
                }).show();
            }
        }
    });

    /** Show error message when the use scans an invalid code. */
    private void showFailedScanDialogue(String invalidString) {
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("Error");
        builder.setMessage("No matching item found for serialnumber: "+ invalidString + ".");
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            @Override
            public void onClick(DialogInterface dialogInterface, int i)
            {
                dialogInterface.dismiss();
            }
        }).show();
    }

    /** Called in onCreate() to initialize MongoDB connection */
    private void initializeMongoDB() {
        user = app.currentUser();
        mongoClient =
                user.getMongoClient(serviceName);
        mongoDatabase =
                mongoClient.getDatabase(databaseName);

        // registry to handle POJOs (Plain Old Java Objects)
        CodecRegistry pojoCodecRegistry = fromRegistries(AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY,
                fromProviders(PojoCodecProvider.builder().automatic(true).build()));
        mongoCollection =
                mongoDatabase.getCollection(
                        collectionName,
                        Item.class).withCodecRegistry(pojoCodecRegistry);
        Log.v("EXAMPLE", "Successfully instantiated the MongoDB collection handle");

        setUpData();
    }

    /**
     * Called after MongoDB connection is initialized.
     * Retrieves  all documents in the MongoDB collection to be shown on the SearchScreenActivity
     *  Handles error in data retrieval if necessary.
     */
    private void setUpData() {
        itemList.clear();

        RealmResultTask<MongoCursor<Item>> findTask = mongoCollection.find().iterator();
        findTask.getAsync(task -> {
            if (task.isSuccess()) {
                MongoCursor<Item> results = task.get();
                Log.v("EXAMPLE", "successfully found all items.");
                while (results.hasNext()) {
                    Item item = results.next();
                    itemList.add(item);
                }
                Collections.sort(itemList, new Comparator<Item>() {
                    public int compare(Item item1, Item item2) {
                        return item1.getItemname().compareTo(item2.getItemname());
                    }
                });
                for(Item item: itemList){
                    item.setListId(listIdCounter);
                    listIdCounter++;
                }
            } else {
                Log.e("EXAMPLE", "failed to find documents with: ", task.getError());

                SharedPreferences sharedPreferences = getSharedPreferences(LoginActivity.PREFS_NAME,0);
                SharedPreferences.Editor editor= sharedPreferences.edit();

                editor.putBoolean("hasLoggedIn",false);
                editor.commit();

                //Show error message if the method failed to find items in the collection.

                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                builder.setTitle("Error");
                builder.setMessage("Failed to find items. Please check Database or Collection name and try again.");
                builder.setPositiveButton("OK", new DialogInterface.OnClickListener()
                {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i)
                    {
                        dialogInterface.dismiss();
                    }
                }).show();
            }
        });
    }

    /**
     * Called when user taps on Log Out option from menu.
     * Switches back to the LoginActivity.
     * */
    public void logoutOnClick(){
        SharedPreferences sharedPreferences = getSharedPreferences(LoginActivity.PREFS_NAME,0);
        SharedPreferences.Editor editor= sharedPreferences.edit();

        editor.putBoolean("hasLoggedIn",false);
        editor.commit();

        Intent intent = new Intent(this, LoginActivity.class);
        startActivity(intent);
        finish();
    }

}
